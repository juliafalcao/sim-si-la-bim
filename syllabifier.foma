# ------------------------------------------ #
#                                            #
#    Syllabifier for Brazilian Portuguese    #
#                                            #
# ------------------------------------------ #

# --------------------------------------------------
# Sets of vowels and consonants / consonant clusters
# --------------------------------------------------
def V [ a | e | o | á | é | ó | í | ú | ã | õ | â | ê | ô | à ]; # Vowels
def G [ i | u ]; # Semi-vowels
def CO [ p | t | {ca} | {co} | {cu} | {que} | {qui} | b | d | {ga} | {go} | {gu} | {gue} | {gui} ]; # Occlusive consonants
def CF [ f | v | s | {ce} | {ci} | ç | z | ss | ch | j | {ge} | {gi} | x ]; # Fricatives
def CL [ l | r | rr ] .o. ~{lh}; # Liquids
def CN [ m | n ]; # Nasals
def C [ {lh} | {nh} | CO | CF | CF | CL | CN ]; # All consonants and clusters

# -----------
# Preparation
# -----------

# Add "$" in the beginning and the end of a word to simplify writing some rules
def WordStart [..] -> "$" || .#. _;
def WordEnd [..] -> "$" || _ .#.;
def MarkBoundaries WordStart .o. WordEnd;

def Prep MarkBoundaries;

# ------------------
# Rules to syllabify
# ------------------

def VowelsExceptÃÕ V .o. ~[ ã | õ ];
def Rule1Case1 [..] -> "-" || VowelsExceptÃÕ _ V;

def Rule2Case5 [..] -> "-" || V C C _ CO;

def GCNSRLX G | CN | s | r | l | x ;
def CNotSHR C .o. ~[ s | h | r];
def Rule3Case2 [..] -> "-" || V GCNSRLX _ CNotSHR;

def Rule4Case1 [..] -> "-" || V _ C C V;

def Rule5Case1 [..] -> "-" || V _ C [V | CL];

def Rule6Case3 [..] -> "-" || C V _ C V;

def Rule7Case4 [..] -> "-" || [C | G] G _ [m | n | r | s] ?;

def Rule8Case5 [..] -> "-" || C V G s _ CO;

def Rule9Case4 [..] -> "-" || C V G _ V;

def CV1 ? ? .o. C; # two-letter Cs
def CV2 ? .o. C V; # one-letter C followed by V
def CV [ CV1 | CV2 ];
def Rule10Case3 [..] -> "-" || G V _ CV;

def Rule11Case3 [..] -> "-" || C _ G r C;

def CQUGU C | {qu} | {gu};
def CLCNCX CL | CN | c | x;
def HLR h | l | r;
def VHLR V | h | l | r;
def Rule12Case1 [..] -> "-" || CQUGU V _ CLCNCX HLR VHLR;

def notHLR ? .o. ~HLR;
def Rule12Case4 [..] -> "-" || CQUGU V CLCNCX _ notHLR VHLR;

def CLCNI CL | CN | i;
def Rule13Case6 [..] -> "-" || C V CLCNI s _ .#.;
def Rule13Case5 [..] -> "-" || C V CLCNI _;

def Rule14Case1a [..] -> "-" || ? a _ a;
def Rule14Case1e [..] -> "-" || ? e _ e;
def Rule14Case1i [..] -> "-" || ? i _ i;
def Rule14Case1o [..] -> "-" || ? o _ o;
def Rule14Case1u [..] -> "-" || ? u _ u;
def Rule14Case1vv [..] -> "-" || ? V _ V V;
def Rule14Case1 Rule14Case1a .o. Rule14Case1e .o. Rule14Case1i .o. Rule14Case1o .o. Rule14Case1u .o. Rule14Case1vv;

def COFVG CO | f | v | g;
def Rule15Case1 [..] -> "-" || ? V _ COFVG [CL | CO] V;

def Ci C .o. ?* i; # qui, gui, gi
def C1 [ l | n | p | t | b | d | f | v | s | ç | z | j | x | r]; # TODO: defined based on C
def Rule16Case4 [..] -> "-" || Ci | [C1 i] _ [a | o] .#.;

# def Rule17Case6 ?*;

def DoubleConsonants [ {ss} | {rr} ];
def Rule18Case1 [..] -> "-" || [C | {qu}] V _ DoubleConsonants;

def Rule18Case2 [..] -> "-" || [C | {qu}] V _ s [C-s];

def Rule18Case5 [..] -> "-" || [C | {qu}] V _ C s CO;

def Rule19Case2 [..] -> "-" || ? V V _ C V;

def Rule19Case1 [..] -> "-" || ? V V _ C [?-V];

# All rules in the order they should be applied
def AllRules Rule1Case1 .o. Rule2Case5 .o. Rule3Case2 .o. Rule4Case1 .o. Rule5Case1 .o. Rule6Case3 .o. Rule11Case3 .o. Rule7Case4 .o. Rule8Case5 .o. Rule9Case4 .o. Rule1Case30 .o. Rule12Case1 .o. Rule12Case4 .o. Rule13Case6 .o. Rule13Case5 .o. Rule14Case1 .o. Rule15Case1 .o. Rule16Case4 .o. Rule18Case1 .o. Rule18Case2 .o. Rule18Case5 .o. Rule19Case2 .o. Rule19Case1;

# -------------
# Cleanup rules
# -------------

def CleanEdgeMarkers "$" -> 0;
def CleanDuplicated "-"+ @-> "-";
def WE1 "-"+ @-> 0 || .#. _;
def WE2 "-"+ @-> 0 || _ .#.;
def CleanWordEdgeHyphens WE1 .o. WE2;

def Cleanup CleanEdgeMarkers .o. CleanDuplicated .o. CleanWordEdgeHyphens;

# ----------------------------
# Final syllabifier transducer
# ----------------------------

def Syllabifier AllRules .o. Cleanup;
regex Syllabifier;
